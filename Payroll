# Base class Employee
class Employee:
    def __init__(self, emp_id, name):
        self.emp_id = emp_id
        self.name = name

    def calculate_payroll(self):
        # Interface method (to be overridden by derived classes)
        raise NotImplementedError("Subclasses must implement this method.")


# Derived class SalaryEmployee
class SalaryEmployee(Employee):
    def __init__(self, emp_id, name, weekly_salary):
        super().__init__(emp_id, name)
        self.weekly_salary = weekly_salary

    def calculate_payroll(self):
        return self.weekly_salary


# Derived class HourlyEmployee
class HourlyEmployee(Employee):
    def __init__(self, emp_id, name, hours_worked, hourly_rate):
        super().__init__(emp_id, name)
        self.hours_worked = hours_worked
        self.hourly_rate = hourly_rate

    def calculate_payroll(self):
        return self.hours_worked * self.hourly_rate


# Derived class CommissionEmployee (inherits from SalaryEmployee)
class CommissionEmployee(SalaryEmployee):
    def __init__(self, emp_id, name, weekly_salary, commission):
        super().__init__(emp_id, name, weekly_salary)
        self.commission = commission

    def calculate_payroll(self):
        # Returns base salary plus commission
        return self.weekly_salary + self.commission


# Example usage
if __name__ == "__main__":
    # Create instances of each employee type
    emp1 = SalaryEmployee(1, "Alice", 1500)
    emp2 = HourlyEmployee(2, "Bob", 40, 20)
    emp3 = CommissionEmployee(3, "Charlie", 1200, 300)

    # Process payroll
    employees = [emp1, emp2, emp3]
    for emp in employees:
        print(f"Employee: {emp.name}, Payroll: {emp.calculate_payroll()}")
